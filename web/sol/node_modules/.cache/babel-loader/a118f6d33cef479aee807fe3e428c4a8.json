{"ast":null,"code":"var _jsxFileName = \"/home/dan/Documents/sol/sol/src/App.js\";\nimport React, { useRef } from 'react';\nimport * as tf from \"@tensorflow/tfjs\";\nimport * as bodyPix from \"@tensorflow-models/body-pix\";\nimport Webcam from \"react-webcam\";\nimport './App.css';\n\nfunction App() {\n  const webcamRef = useRef(null);\n  const canvasRef = useRef(null);\n\n  const runBodySegment = async () => {\n    const net = await bodyPix.load();\n    detect(net); // setInterval(() => {\n    // \tdetect(net);\n    // }, 100);\n  };\n\n  const detect = async net => {\n    if (typeof webcamRef.current !== \"undefined\" && webcamRef.current !== null && webcamRef.current.video.readyState === 4) {\n      const video = webcamRef.current.video;\n      const videoHeight = video.videoHeight;\n      const videoWidth = video.videoWidth;\n      webcamRef.current.video.height = videoHeight;\n      webcamRef.current.video.width = videoWidth;\n      canvasRef.current.width = videoWidth;\n      canvasRef.current.height = videoHeight;\n      const person = await net.segmentPersonParts(video);\n      console.log(person);\n      const coloredPart = bodyPix.toColoredPartMask(person);\n      bodyPix.drawMask(canvasRef.current, video, coloredPart, 0.7, 0, false);\n    }\n  };\n\n  runBodySegment();\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"header\", {\n    className: \"App-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Webcam, {\n    ref: webcamRef,\n    style: {\n      position: \"absolute\",\n      marginLeft: \"auto\",\n      marginRight: \"auto\",\n      left: 0,\n      right: 0,\n      textAlign: \"center\",\n      zIndex: 9,\n      width: 640,\n      height: 480\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(\"canvas\", {\n    ref: canvasRef,\n    style: {\n      position: \"absolute\",\n      marginLeft: \"auto\",\n      marginRight: \"auto\",\n      left: 0,\n      right: 0,\n      textAlign: \"center\",\n      zIndex: 9,\n      width: 640,\n      height: 480\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 3\n    }\n  })));\n}\n\nexport default App;","map":{"version":3,"sources":["/home/dan/Documents/sol/sol/src/App.js"],"names":["React","useRef","tf","bodyPix","Webcam","App","webcamRef","canvasRef","runBodySegment","net","load","detect","current","video","readyState","videoHeight","videoWidth","height","width","person","segmentPersonParts","console","log","coloredPart","toColoredPartMask","drawMask","position","marginLeft","marginRight","left","right","textAlign","zIndex"],"mappings":"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","sourcesContent":["import React, { useRef } from 'react';\nimport * as tf from \"@tensorflow/tfjs\";\nimport * as bodyPix from \"@tensorflow-models/body-pix\";\nimport Webcam from \"react-webcam\";\nimport './App.css';\n\nfunction App() {\n\tconst webcamRef = useRef(null);\n\tconst canvasRef = useRef(null);\n\n\tconst runBodySegment = async () => {\n\t\tconst net = await bodyPix.load();\n\t\tdetect(net);\n\t\t// setInterval(() => {\n\t\t// \tdetect(net);\n\t\t// }, 100);\n\t}\n\n\tconst detect = async (net) => {\n\t\tif (\n\t\t\ttypeof webcamRef.current !== \"undefined\" &&\n\t\t\twebcamRef.current !== null &&\n\t\t\twebcamRef.current.video.readyState === 4\n\t\t\t) {\n\t\t\t\tconst video = webcamRef.current.video;\n\t\t\t\tconst videoHeight = video.videoHeight;\n\t\t\t\tconst videoWidth = video.videoWidth;\n\n\t\t\t\twebcamRef.current.video.height = videoHeight;\n\t\t\t\twebcamRef.current.video.width = videoWidth;\n\n\t\t\t\tcanvasRef.current.width = videoWidth;\n\t\t\t\tcanvasRef.current.height = videoHeight;\n\n\t\t\t\tconst person = await net.segmentPersonParts(video);\n\t\t\t\tconsole.log(person);\n\n\t\t\t\tconst coloredPart = bodyPix.toColoredPartMask(person);\n\n\t\t\t\tbodyPix.drawMask(\n\t\t\t\t\tcanvasRef.current,\n\t\t\t\t\tvideo,\n\t\t\t\t\tcoloredPart,\n\t\t\t\t\t0.7,\n\t\t\t\t\t0,\n\t\t\t\t\tfalse\n\t\t\t\t)\n\t\t\t}\n\t}\n\n\trunBodySegment();\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n\t   <Webcam ref={webcamRef}\n\t\t\tstyle = {{\n\t\t\t\tposition:\"absolute\",\n\t\t\t\tmarginLeft:\"auto\",\n\t\t\t\tmarginRight:\"auto\",\n\t\t\t\tleft:0,\n\t\t\t\tright:0,\n\t\t\t\ttextAlign:\"center\",\n\t\t\t\tzIndex:9,\n\t\t\t\twidth:640,\n\t\t\t\theight:480\n\t\t\t}} />\n\t\t<canvas ref={canvasRef}\n\t\t\tstyle = {{\n\t\t\t\tposition:\"absolute\",\n\t\t\t\tmarginLeft:\"auto\",\n\t\t\t\tmarginRight:\"auto\",\n\t\t\t\tleft:0,\n\t\t\t\tright:0,\n\t\t\t\ttextAlign:\"center\",\n\t\t\t\tzIndex:9,\n\t\t\t\twidth:640,\n\t\t\t\theight:480\n\t\t\t}} />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}